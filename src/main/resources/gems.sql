/*
SQLyog Ultimate v11.26 (32 bit)
MySQL - 5.7.14
*********************************************************************
*/

INSERT INTO `T_BAS_MENU` (`MENUID`, `MENUNAME`, `MENUURL`, `MENUPIC`, `PID`, `MENUCODE`, `STYPE`, `ORDERNUM`) VALUES('3','数据查询','','framework/images/dataquery.png',NULL,'22',NULL,'2');
INSERT INTO `T_BAS_MENU` (`MENUID`, `MENUNAME`, `MENUURL`, `MENUPIC`, `PID`, `MENUCODE`, `STYPE`, `ORDERNUM`) VALUES('4','告警管理','','framework/images/notice.png',NULL,'22',NULL,'1');
INSERT INTO `T_BAS_MENU` (`MENUID`, `MENUNAME`, `MENUURL`, `MENUPIC`, `PID`, `MENUCODE`, `STYPE`, `ORDERNUM`) VALUES('112','历史数据','/gems/views/gems/dataHistory.html',NULL,'3','22',NULL,'4');
INSERT INTO `T_BAS_MENU` (`MENUID`, `MENUNAME`, `MENUURL`, `MENUPIC`, `PID`, `MENUCODE`, `STYPE`, `ORDERNUM`) VALUES('113','数据完整性统计','/gems/views/gems/dataStatistics.html',NULL,'3','22',NULL,'3');
INSERT INTO `T_BAS_MENU` (`MENUID`, `MENUNAME`, `MENUURL`, `MENUPIC`, `PID`, `MENUCODE`, `STYPE`, `ORDERNUM`) VALUES('114','实时数据','/gems/views/gems/realTimeData.html',NULL,'3','22',NULL,'2');
INSERT INTO `T_BAS_MENU` (`MENUID`, `MENUNAME`, `MENUURL`, `MENUPIC`, `PID`, `MENUCODE`, `STYPE`, `ORDERNUM`) VALUES('115','实时告警','/gems/views/gems/realTimeAlarm.html',NULL,'4','22',NULL,'1');
INSERT INTO `T_BAS_MENU` (`MENUID`, `MENUNAME`, `MENUURL`, `MENUPIC`, `PID`, `MENUCODE`, `STYPE`, `ORDERNUM`) VALUES('116','历史告警','/gems/views/gems/historyAlarm.html',NULL,'4','22',NULL,'1');
INSERT INTO `T_BAS_MENU` (`MENUID`, `MENUNAME`, `MENUURL`, `MENUPIC`, `PID`, `MENUCODE`, `STYPE`, `ORDERNUM`) VALUES('117','超标数据查询','/gems/views/gems/dataExceedStandard.html',NULL,'3','22',NULL,'5');

INSERT INTO T_BAS_USERMENU(MENUID,USERID,`type`) VALUES(3,1,1);
INSERT INTO T_BAS_USERMENU(MENUID,USERID,`type`) VALUES(4,1,1);
INSERT INTO T_BAS_USERMENU(MENUID,USERID,`type`) VALUES(112,1,1);
INSERT INTO T_BAS_USERMENU(MENUID,USERID,`type`) VALUES(113,1,1);
INSERT INTO T_BAS_USERMENU(MENUID,USERID,`type`) VALUES(114,1,1);
INSERT INTO T_BAS_USERMENU(MENUID,USERID,`type`) VALUES(115,1,1);
INSERT INTO T_BAS_USERMENU(MENUID,USERID,`type`) VALUES(116,1,1);
INSERT INTO T_BAS_USERMENU(MENUID,USERID,`type`) VALUES(117,1,1);


INSERT INTO T_DIC_GENCATETYPE(categoryclass,categoryname) VALUES('alarmLevel','报警级别');
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('alarmLevel1','一级','alarmLevel','10','1',NULL);
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('alarmLevel2','二级','alarmLevel','20','1',NULL);
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('alarmLevel3','三级','alarmLevel','30','1',NULL);

INSERT INTO T_DIC_GENCATETYPE(categoryclass,categoryname) VALUES('realTime','站点状态');
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('realTime0','离线','realTime',NULL,'1','离线状态');
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('realTime1','正常','realTime',NULL,'1','查询正常状态');
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('realTime2','超标','realTime',NULL,'1',NULL);

INSERT INTO T_DIC_GENCATETYPE(categoryclass,categoryname) VALUES('dataType','数据类型');
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('1','实时数据','dataType',NULL,'1','');
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('2','分钟数据','dataType',NULL,'1','');
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('3','小时数据','dataType','40','1',NULL);
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('4','日数据','dataType','10','1',NULL);

INSERT INTO T_DIC_GENCATETYPE(categoryclass,categoryname) VALUES('avgDataType','均值数据类型');
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('avg2','分均值','avgDataType','10','1',NULL);
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('avg3','时均值','avgDataType','20','1',NULL);
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('avg4','日均值','avgDataType','30','1',NULL);
INSERT INTO `T_DIC_GENERALCATEGORY` (`GENERALCODE`, `CATEGORYNAME`, `CATEGORYCLASS`, `ORDERNUM`, `CSTATUS`, `REMARK`) VALUES('avg5','月均值','avgDataType','40','1',NULL);


INSERT INTO  T_DIC_GENCATETYPE(categoryclass,categoryname) VALUES('KZJB','控制级别');
INSERT INTO `T_DIC_GENERALCATEGORY` (`CATEGORYCLASS`, `CATEGORYNAME`, `GENERALCODE`) VALUES('KZJB','国控','KZJB01');
INSERT INTO `T_DIC_GENERALCATEGORY` (`CATEGORYCLASS`, `CATEGORYNAME`, `GENERALCODE`) VALUES('KZJB','省控','KZJB02');
INSERT INTO `T_DIC_GENERALCATEGORY` (`CATEGORYCLASS`, `CATEGORYNAME`, `GENERALCODE`) VALUES('KZJB','市控','KZJB03');
INSERT INTO `T_DIC_GENERALCATEGORY` (`CATEGORYCLASS`, `CATEGORYNAME`, `GENERALCODE`) VALUES('KZJB','县控','KZJB04');
INSERT INTO `T_DIC_GENERALCATEGORY` (`CATEGORYCLASS`, `CATEGORYNAME`, `GENERALCODE`) VALUES('KZJB','企业群','KZJB05');
INSERT INTO `T_DIC_GENERALCATEGORY` (`CATEGORYCLASS`, `CATEGORYNAME`, `GENERALCODE`) VALUES('KZJB','市直属','KZJB06');
INSERT INTO `T_DIC_GENERALCATEGORY` (`CATEGORYCLASS`, `CATEGORYNAME`, `GENERALCODE`) VALUES('KZJB','其他','KZJB07');
/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*Table structure for table `T_BAS_ALM_DEF` */

DROP TABLE IF EXISTS `T_BAS_ALM_DEF`;

CREATE TABLE `T_BAS_ALM_DEF` (
  `ALARMCODE` int(11) NOT NULL AUTO_INCREMENT COMMENT '告警码',
  `ALMTYPEID` int(11) DEFAULT NULL COMMENT '告警类型ID',
  `DESCRIPTION` varchar(200) DEFAULT NULL COMMENT '告警描述',
  `SUGGESTION` varchar(500) DEFAULT NULL COMMENT '处理建议',
  PRIMARY KEY (`ALARMCODE`),
  KEY `FK_T_BAS_AL_REFERENCE_T_BAS_AL1` (`ALMTYPEID`),
  CONSTRAINT `FK_T_BAS_AL_REFERENCE_T_BAS_AL1` FOREIGN KEY (`ALMTYPEID`) REFERENCES `T_BAS_ALM_TYPE` (`ALMTYPEID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COMMENT='告警定义表';

/*Table structure for table `T_BAS_ALM_TYPE` */

DROP TABLE IF EXISTS `T_BAS_ALM_TYPE`;

CREATE TABLE `T_BAS_ALM_TYPE` (
  `ALMTYPEID` int(11) NOT NULL COMMENT '告警类型ID',
  `ALMTYPENAME` varchar(50) DEFAULT NULL COMMENT '告警类别名称',
  `ALMTYPECOLOR` varchar(10) DEFAULT NULL COMMENT '告警组颜色',
  `ALARTYPELEVEL` varchar(20) DEFAULT NULL COMMENT '告警类别等级',
  `DESCRIPTION` varchar(200) DEFAULT NULL COMMENT '告警描述',
  PRIMARY KEY (`ALMTYPEID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='告警类别表';

/*Table structure for table `T_BAS_ALMINFO` */

DROP TABLE IF EXISTS `T_BAS_ALMINFO`;

CREATE TABLE `T_BAS_ALMINFO` (
  `POINTCODE` int(11) NOT NULL COMMENT '测点代码',
  `ALARMCODE` int(11) NOT NULL COMMENT '告警码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '检测项目代码',
  `STARTTIME` datetime NOT NULL COMMENT '起始时间',
  `ALARMVALUE` double DEFAULT NULL COMMENT '告警值',
  `ENDTIME` datetime DEFAULT NULL COMMENT '结束时间',
  `ALARMSTATUS` int(11) DEFAULT NULL COMMENT '告警状态有1新产生告警2忽略此告警3正在处理4已消警',
  `CREATEUSERID` int(11) DEFAULT NULL COMMENT '创建人id',
  `CREATETIME` datetime DEFAULT NULL COMMENT '创建时间',
  `MODIFYUSERID` int(11) DEFAULT NULL COMMENT '更新人id',
  `MODIFYTIME` datetime DEFAULT NULL COMMENT '更新时间',
  `ISSHIELDING` int(11) DEFAULT '0' COMMENT '是否屏蔽【0：没有屏蔽，1：屏蔽】',
  `REMARK` varchar(200) DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`POINTCODE`,`ALARMCODE`,`POLLUTECODE`,`STARTTIME`),
  KEY `FK_Reference_56` (`ALARMCODE`),
  CONSTRAINT `FK_Reference_56` FOREIGN KEY (`ALARMCODE`) REFERENCES `T_BAS_ALM_DEF` (`ALARMCODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='告警信息表';

/*Table structure for table `T_BAS_COMMANDINFO` */

DROP TABLE IF EXISTS `T_BAS_COMMANDINFO`;

CREATE TABLE `T_BAS_COMMANDINFO` (
  `QN` varchar(50) NOT NULL COMMENT 'T212_QN',
  `POINTCODE` int(11) DEFAULT NULL COMMENT '站点ID',
  `MSG` varchar(500) DEFAULT NULL COMMENT '下行命令内容',
  `DATATIME` datetime DEFAULT NULL COMMENT '排序',
  `PRI` int(11) DEFAULT NULL COMMENT '1优先级最高',
  PRIMARY KEY (`QN`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='下行命令表';

/*Table structure for table `T_BAS_COMPDATA_REC` */

DROP TABLE IF EXISTS `T_BAS_COMPDATA_REC`;

CREATE TABLE `T_BAS_COMPDATA_REC` (
  `QN` varchar(50) NOT NULL COMMENT 'QN',
  `STDPOINTCODE` varchar(50) DEFAULT NULL COMMENT '标准测点代码',
  `MSG` varchar(500) DEFAULT NULL COMMENT 'MSG',
  `DATATIME` datetime DEFAULT NULL COMMENT '时间',
  `USERID` int(11) DEFAULT NULL COMMENT '用户id',
  `CMDSTATUS` int(11) DEFAULT NULL COMMENT '命令状态',
  `REMARK` varchar(100) DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`QN`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='公共业务反控-补数记录';

/*Table structure for table `T_BAS_COMPDATA_REC_DETAIL` */

DROP TABLE IF EXISTS `T_BAS_COMPDATA_REC_DETAIL`;

CREATE TABLE `T_BAS_COMPDATA_REC_DETAIL` (
  `SID` int(11) NOT NULL AUTO_INCREMENT COMMENT '记录流水ID',
  `QN` varchar(50) DEFAULT NULL COMMENT 'QN',
  `DATATIME` datetime DEFAULT NULL COMMENT '操作时间',
  `Column_7` varchar(200) DEFAULT NULL COMMENT '执行结果',
  `USERID` int(11) DEFAULT NULL COMMENT '用户id',
  `REMARK` varchar(500) DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`SID`),
  KEY `FK_Reference_30` (`QN`),
  CONSTRAINT `FK_Reference_30` FOREIGN KEY (`QN`) REFERENCES `T_BAS_COMPDATA_REC` (`QN`)
) ENGINE=InnoDB AUTO_INCREMENT=228 DEFAULT CHARSET=utf8 COMMENT='公共业务反控-补数记录详请';

/*Table structure for table `T_BAS_DATALATEST` */

DROP TABLE IF EXISTS `T_BAS_DATALATEST`;

CREATE TABLE `T_BAS_DATALATEST` (
  `POINTCODE` int(11) NOT NULL COMMENT '测点代码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '监测项目代码',
  `DATATIME` datetime NOT NULL COMMENT '日期',
  `DATAVALUE` double DEFAULT NULL COMMENT '均值',
  `ROUNDINGOFFVALUE` double DEFAULT NULL COMMENT '修约值',
  `UPDATETIME` datetime DEFAULT NULL COMMENT '更新时间',
  `DATAFLAG` varchar(50) DEFAULT NULL COMMENT '数据标识位',
  PRIMARY KEY (`POINTCODE`,`POLLUTECODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='最新实时数据';

/*Table structure for table `T_BAS_DATART_MID` */

DROP TABLE IF EXISTS `T_BAS_DATART_MID`;

CREATE TABLE `T_BAS_DATART_MID` (
  `POINTCODE` int(11) NOT NULL COMMENT '测点代码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '监测项目代码',
  `DATATIME` datetime NOT NULL COMMENT '日期',
  `SYSTEMTYPE` int(11) NOT NULL COMMENT '系统类型',
  `DATAVALUE` double DEFAULT NULL COMMENT '均值',
  `UPDATETIME` datetime DEFAULT NULL COMMENT '更新时间',
  `DATAFLAG` varchar(50) DEFAULT NULL COMMENT '数据标识位',
  PRIMARY KEY (`POINTCODE`,`POLLUTECODE`,`DATATIME`,`SYSTEMTYPE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='实时数据中间表';

/*Table structure for table `T_BAS_EQUIP` */

DROP TABLE IF EXISTS `T_BAS_EQUIP`;

CREATE TABLE `T_BAS_EQUIP` (
  `EID` int(11) NOT NULL AUTO_INCREMENT COMMENT '设施id',
  `EQUIPCODE` varchar(50) DEFAULT NULL COMMENT '设施代码',
  `POINTCODE` int(11) DEFAULT NULL COMMENT '测点编码',
  `ETYPECODE` varchar(50) DEFAULT NULL COMMENT '型号代码',
  `EQUIPNAME` varchar(50) DEFAULT NULL COMMENT '设施名称',
  `EQUIPTYPE` varchar(50) DEFAULT NULL COMMENT '设施类型',
  `RUNDATE` datetime DEFAULT NULL COMMENT '运行日期',
  `MAINTENANCEUNIT` varchar(50) DEFAULT NULL COMMENT '运维单位',
  `MAINTUNITCONTACT` varchar(50) DEFAULT NULL COMMENT '运维联系人',
  `MAINTUNITCONTACTPHONE` varchar(20) DEFAULT NULL COMMENT '运维联系电话',
  `EGROUP` varchar(50) DEFAULT NULL COMMENT '设施分组',
  `MICYCLETIME` int(11) DEFAULT NULL COMMENT '分钟数据上报周期',
  `RTCYTLETIME` int(11) DEFAULT NULL COMMENT '实时数据上报周期',
  `TECHTYPE` varchar(50) DEFAULT NULL COMMENT '工艺类型代码',
  PRIMARY KEY (`EID`),
  KEY `FK_Reference_44` (`ETYPECODE`),
  CONSTRAINT `FK_Reference_44` FOREIGN KEY (`ETYPECODE`) REFERENCES `T_BAS_EQUIPTYPE` (`ETYPECODE`)
) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8 COMMENT='公共业务基础-检测设施信息表';

/*Table structure for table `T_BAS_EQUIPALMINFO` */

DROP TABLE IF EXISTS `T_BAS_EQUIPALMINFO`;

CREATE TABLE `T_BAS_EQUIPALMINFO` (
  `POINTCODE` int(11) NOT NULL COMMENT '测点代码',
  `ALARMCODE` int(11) NOT NULL COMMENT '告警码',
  `EID` int(11) NOT NULL COMMENT '设备ID',
  `STARTTIME` datetime NOT NULL COMMENT '起始时间',
  `ALARMVALUE` double DEFAULT NULL COMMENT '告警值',
  `ENDTIME` datetime DEFAULT NULL COMMENT '结束时间',
  `ALARMSTATUS` int(11) DEFAULT NULL COMMENT '告警状态有1新产生告警2忽略此告警3正在处理4已消警',
  `CREATEUSERID` int(11) DEFAULT NULL COMMENT '创建人id',
  `CREATETIME` datetime DEFAULT NULL COMMENT '创建时间',
  `MODIFYUSERID` int(11) DEFAULT NULL COMMENT '更新人id',
  `MODIFYTIME` datetime DEFAULT NULL COMMENT '更新时间',
  `REMARK` varchar(200) DEFAULT NULL COMMENT '备注',
  PRIMARY KEY (`POINTCODE`,`ALARMCODE`,`EID`,`STARTTIME`),
  KEY `FK_Reference_58` (`ALARMCODE`),
  CONSTRAINT `FK_Reference_58` FOREIGN KEY (`ALARMCODE`) REFERENCES `T_BAS_ALM_DEF` (`ALARMCODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='设备告警信息表';

/*Table structure for table `T_BAS_EQUIPPOLLCODE` */

DROP TABLE IF EXISTS `T_BAS_EQUIPPOLLCODE`;

CREATE TABLE `T_BAS_EQUIPPOLLCODE` (
  `EID` int(11) NOT NULL COMMENT '设施代码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '检测项目代码',
  `MEASUREMAX` double DEFAULT NULL COMMENT '量程上限',
  `MEASUREMIN` double DEFAULT NULL COMMENT '量程下限',
  `ORDERNUM` int(11) DEFAULT NULL COMMENT '排序',
  `REMARK` varchar(50) DEFAULT NULL COMMENT '备注',
  `DURATION` double DEFAULT '1440' COMMENT '浓度低于下限持续时间（时分等单位s）',
  `DURATIONOFDAY` double DEFAULT '7' COMMENT '浓度低于下限持续时间（天-单位天）',
  `SV` double DEFAULT NULL COMMENT '特定值浓度',
  PRIMARY KEY (`EID`,`POLLUTECODE`),
  KEY `FK_R_EQUIPPOLLUTECODE_POLLUTECODE` (`POLLUTECODE`),
  CONSTRAINT `FK_R_EQUIPPOLLUTECODE_EQUIP` FOREIGN KEY (`EID`) REFERENCES `T_BAS_EQUIP` (`EID`),
  CONSTRAINT `FK_R_EQUIPPOLLUTECODE_POLLUTECODE` FOREIGN KEY (`POLLUTECODE`) REFERENCES `T_DIC_STDPOLLCODE` (`POLLUTECODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='公共业务基础-检测设施检测项目关系表';

/*Table structure for table `T_BAS_EQUIPTYPE` */

DROP TABLE IF EXISTS `T_BAS_EQUIPTYPE`;

CREATE TABLE `T_BAS_EQUIPTYPE` (
  `ETYPECODE` varchar(50) NOT NULL COMMENT '型号代码',
  `ETYPENAME` varchar(50) DEFAULT NULL COMMENT '设备型号名称',
  `ETYPE` varchar(50) DEFAULT NULL COMMENT '设备型号类型',
  `MANUFACTURER` varchar(50) DEFAULT NULL COMMENT '生产厂家',
  `CONTACT` varchar(50) DEFAULT NULL COMMENT '联系人',
  `CONTACTPHONE` varchar(50) DEFAULT NULL COMMENT '联系电话',
  `ORDERNUM` int(11) DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`ETYPECODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='公共业务基础-设备型号表';

/*Table structure for table `T_BAS_ETYPEPOLLUTE` */

DROP TABLE IF EXISTS `T_BAS_ETYPEPOLLUTE`;

CREATE TABLE `T_BAS_ETYPEPOLLUTE` (
  `ETYPECODE` varchar(50) NOT NULL COMMENT '设施型号代码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '检测项目代码',
  `MEASUREMAX` double DEFAULT NULL COMMENT '量程上限',
  `MEASUREMIN` double DEFAULT NULL COMMENT '量程下限',
  `ORDERNUM` int(11) DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`ETYPECODE`,`POLLUTECODE`),
  CONSTRAINT `FK_Reference_39` FOREIGN KEY (`ETYPECODE`) REFERENCES `T_BAS_EQUIPTYPE` (`ETYPECODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='公共业务基础-检测设施型号检测项目关系表';

/*Table structure for table `T_DIC_AREACODE` */

DROP TABLE IF EXISTS `T_DIC_AREACODE`;

CREATE TABLE `T_DIC_AREACODE` (
  `CODE_REGION` varchar(50) NOT NULL COMMENT '区划代码',
  `REGIONNAME` varchar(50) DEFAULT NULL COMMENT '标准代码',
  `PCODE` varchar(50) DEFAULT NULL COMMENT '父级区划',
  `TYPECODE` varchar(10) DEFAULT NULL COMMENT '城乡分类代码',
  `TYPENAME` varchar(30) DEFAULT NULL COMMENT '分类名称',
  `ORDERNUM` int(11) DEFAULT NULL COMMENT '顺序',
  `LONGITUDE` double DEFAULT NULL COMMENT '经度',
  `LATITUDE` double DEFAULT NULL COMMENT '纬度',
  `LEVEL` int(11) DEFAULT NULL COMMENT '层级1省级2城市3区县',
  PRIMARY KEY (`CODE_REGION`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='字典-区域';

/*Table structure for table `T_DIC_POINTSYSTYPE` */

DROP TABLE IF EXISTS `T_DIC_POINTSYSTYPE`;

CREATE TABLE `T_DIC_POINTSYSTYPE` (
  `SYSTEMTYPE` int(11) NOT NULL COMMENT '系统代码',
  `SYSNAME` varchar(50) DEFAULT NULL COMMENT '系统名称',
  `TNAMERT` varchar(30) DEFAULT NULL COMMENT '实时数据表名',
  `TNAMEMI` varchar(30) DEFAULT NULL COMMENT '分钟数据表名',
  `TNAMEHH` varchar(30) DEFAULT NULL COMMENT '小时数据表名',
  `REMARK` varchar(50) DEFAULT NULL COMMENT '备注',
  `SNAME` varchar(30) DEFAULT NULL COMMENT '测站或者污染源名',
  `PNAME` varchar(30) DEFAULT NULL COMMENT '测点排口名',
  `ATNAMERT` varchar(30) DEFAULT NULL COMMENT '实时数据表名-审核',
  `ATNAMEMI` varchar(30) DEFAULT NULL COMMENT '分钟数据表名-审核',
  `ATNAMEHH` varchar(30) DEFAULT NULL COMMENT '小时数据表名-审核',
  `C1` varchar(30) DEFAULT NULL COMMENT '扩展列1',
  `C2` varchar(30) DEFAULT NULL COMMENT '扩展列2',
  `TNAMESTAT` varchar(30) DEFAULT NULL COMMENT '统计表',
  `C3` varchar(30) DEFAULT NULL COMMENT '扩展列3',
  PRIMARY KEY (`SYSTEMTYPE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='字典-测点系统类型';

/*Table structure for table `T_DIC_POLLSTD` */

DROP TABLE IF EXISTS `T_DIC_POLLSTD`;

CREATE TABLE `T_DIC_POLLSTD` (
  `SCODE` int(11) NOT NULL COMMENT '标准编码',
  `SNAME` varchar(50) DEFAULT NULL COMMENT '标准名称',
  `SYSTEMTYPE` int(11) DEFAULT NULL COMMENT '系统类型',
  `TRADE` varchar(50) DEFAULT NULL COMMENT '行业',
  PRIMARY KEY (`SCODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='字典-检测项目标准表';

/*Table structure for table `T_DIC_POLLSTD_DETAIL` */

DROP TABLE IF EXISTS `T_DIC_POLLSTD_DETAIL`;

CREATE TABLE `T_DIC_POLLSTD_DETAIL` (
  `SCODE` int(11) NOT NULL COMMENT '标准编码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '污染物编码',
  `SMAXVALUE` double DEFAULT NULL COMMENT '标准值上限',
  `SMINVALUE` double DEFAULT NULL COMMENT '标准值下限',
  `SUNIT` varchar(50) DEFAULT NULL COMMENT '标准值单位',
  PRIMARY KEY (`POLLUTECODE`,`SCODE`),
  KEY `FK_Reference_32` (`SCODE`),
  CONSTRAINT `FK_Reference_32` FOREIGN KEY (`SCODE`) REFERENCES `T_DIC_POLLSTD` (`SCODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='字典-检测项目标准明细';

/*Table structure for table `T_DIC_STDPOLLCODE` */

DROP TABLE IF EXISTS `T_DIC_STDPOLLCODE`;

CREATE TABLE `T_DIC_STDPOLLCODE` (
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '污染物代码',
  `SYMBOLS` varchar(20) DEFAULT NULL COMMENT '化学符号',
  `POLLUTENAME` varchar(50) DEFAULT NULL COMMENT '污染物名称',
  `ENNAME` varchar(50) DEFAULT NULL COMMENT '污染物英文名',
  `CODETYPE` varchar(50) DEFAULT NULL COMMENT '项目类别',
  `POLLCONCUNIT` varchar(50) DEFAULT NULL COMMENT '污染物浓度单位',
  `POLLUTEAMOUNTUNIT` varchar(50) DEFAULT NULL COMMENT '污染物排放量单位',
  `NUMPRECISION` int(11) DEFAULT NULL COMMENT '精度',
  `CAS` varchar(20) DEFAULT NULL COMMENT 'CAS号',
  `POLLUTEALIAS` varchar(50) DEFAULT NULL COMMENT '别名',
  `ORDERNUM` int(11) DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`POLLUTECODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='字典-污染物检测项目代码表';

/*Table structure for table `T_ENV_MONI_AIR_AUDDATAHH` */

DROP TABLE IF EXISTS `T_ENV_MONI_AIR_AUDDATAHH`;

CREATE TABLE `T_ENV_MONI_AIR_AUDDATAHH` (
  `POINTCODE` int(11) NOT NULL COMMENT '测点代码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '监测项目代码',
  `DATATIME` datetime NOT NULL COMMENT '日期',
  `MAXVALUE` double DEFAULT NULL COMMENT '最大值',
  `MINVALUE` double DEFAULT NULL COMMENT '最小值',
  `DATAVALUE` double DEFAULT NULL COMMENT '均值',
  `UPDATETIME` datetime DEFAULT NULL COMMENT '更新时间',
  `DATAFLAG` varchar(50) DEFAULT NULL COMMENT '数据标识位',
  PRIMARY KEY (`POINTCODE`,`POLLUTECODE`,`DATATIME`),
  KEY `I_T_ENV_MONI_SAIR_AUDITDATAHH` (`POINTCODE`,`POLLUTECODE`,`DATATIME`),
  KEY `I_T_ENV_MONI_AIR_AUDATAHH` (`POINTCODE`,`POLLUTECODE`,`DATATIME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='存储站点的各个参数的小时汇总数据';

/*Table structure for table `T_ENV_MONI_AIR_DATAHH` */

DROP TABLE IF EXISTS `T_ENV_MONI_AIR_DATAHH`;

CREATE TABLE `T_ENV_MONI_AIR_DATAHH` (
  `POINTCODE` int(11) NOT NULL COMMENT '测点代码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '监测项目代码',
  `DATATIME` datetime NOT NULL COMMENT '日期',
  `MAXVALUE` double DEFAULT NULL COMMENT '最大值',
  `MINVALUE` double DEFAULT NULL COMMENT '最小值',
  `DATAVALUE` double DEFAULT NULL COMMENT '均值',
  `UPDATETIME` datetime DEFAULT NULL COMMENT '更新时间',
  `DATAFLAG` varchar(50) DEFAULT NULL COMMENT '数据标识位',
  `ROUNDINGOFFVALUE` double DEFAULT NULL COMMENT '修约值',
  PRIMARY KEY (`POINTCODE`,`POLLUTECODE`,`DATATIME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='环境质量数据-空气站大气监测小时数据';

/*Table structure for table `T_ENV_MONI_AIR_DATASATA` */

DROP TABLE IF EXISTS `T_ENV_MONI_AIR_DATASATA`;

CREATE TABLE `T_ENV_MONI_AIR_DATASATA` (
  `POINTCODE` int(11) NOT NULL COMMENT '测点代码',
  `POLLUTECODE` varchar(50) NOT NULL COMMENT '监测项目代码',
  `MONITORTYPE` int(11) NOT NULL COMMENT '监测类型',
  `DATATIME` datetime NOT NULL COMMENT '日期',
  `UPDATETIME` datetime DEFAULT NULL COMMENT '更新时间',
  `MAXVALUE` double DEFAULT NULL COMMENT '最大值',
  `MINVALUE` double DEFAULT NULL COMMENT '最小值',
  `AVGVALUE` double DEFAULT NULL COMMENT '均值',
  `DATAFLAG` varchar(50) DEFAULT NULL COMMENT '数据标识位',
  PRIMARY KEY (`POINTCODE`,`MONITORTYPE`,`POLLUTECODE`,`DATATIME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='都是审核后数据包含空气站所有测点汇总天，月等数据';

/*Table structure for table `T_ENV_MONI_AIR_STATION` */

DROP TABLE IF EXISTS `T_ENV_MONI_AIR_STATION`;

CREATE TABLE `T_ENV_MONI_AIR_STATION` (
  `POINTCODE` int(11) NOT NULL COMMENT '测点代码',
  `STATIONCODE` int(11) DEFAULT NULL COMMENT '测站代码',
  `STDPOINTCODE` varchar(50) DEFAULT NULL COMMENT '标准测点代码',
  `POINTNAME` varchar(50) DEFAULT NULL COMMENT '测点名称',
  `POINTADDRESS` varchar(50) DEFAULT NULL COMMENT '测点位置',
  `GASAREACODE` varchar(50) DEFAULT NULL COMMENT '空气质量功能区划级别',
  `ATRRIBUTECODE` varchar(50) DEFAULT NULL COMMENT '测点基本属性代码(点位类型趋势点,城市背景电,控制点)',
  `REGIONCODE` varchar(50) DEFAULT NULL COMMENT '行政区划代码',
  `REPORTLEVELCODE` varchar(50) DEFAULT NULL COMMENT '空气质量报告级别',
  `AIRLEVELCODE` varchar(50) DEFAULT NULL COMMENT '大气网管级别',
  `PRECIPITATIONLEVELCODE` varchar(50) DEFAULT NULL COMMENT '降水网管级别',
  `SO2LEVELCODE` varchar(50) DEFAULT NULL COMMENT '二氧化硫区管级别',
  `ACIDLEVELCODE` varchar(50) DEFAULT NULL COMMENT '酸雨区管级别',
  `LONGITUDE` double DEFAULT NULL COMMENT '经度',
  `LATITUDE` double DEFAULT NULL COMMENT '纬度',
  `HEIGHT` double DEFAULT NULL COMMENT '高度',
  `POINTCODETYPE` int(11) DEFAULT NULL COMMENT '测点类型1空气质量测点2降尘3降水等',
  `CREATETIME` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `ORDERNUM` int(11) DEFAULT NULL COMMENT '排序',
  `MICYCLETIME` int(11) DEFAULT NULL COMMENT '分钟数据上报周期',
  `RTCYTLETIME` int(11) DEFAULT NULL COMMENT '实时数据上报周期',
  `ISSUPPLEMENT` int(11) DEFAULT NULL COMMENT '是否支持补数1是0否',
  `STATIONTYPE` int(11) DEFAULT NULL COMMENT '测站类型1自营测点2抓取测点',
  `STATUS` int(4) DEFAULT '0' COMMENT '空气站测点状态【0：在线，1离线】',
  `SCODE` int(11) DEFAULT NULL COMMENT '执行标准代码',
  `HASVIDEO` int(4) DEFAULT '0' COMMENT '空气站测点视频【0：无视频，1有视频】',
  PRIMARY KEY (`POINTCODE`),
  KEY `FK_Reference_53` (`STATIONCODE`),
  CONSTRAINT `FK_Reference_53` FOREIGN KEY (`STATIONCODE`) REFERENCES `T_ENV_MONI_STATION` (`STATIONCODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='环境质量基础-大气测点信息';

/*Table structure for table `T_ENV_MONI_STATION` */

DROP TABLE IF EXISTS `T_ENV_MONI_STATION`;

CREATE TABLE `T_ENV_MONI_STATION` (
  `STATIONCODE` int(11) NOT NULL AUTO_INCREMENT COMMENT '测站代码',
  `STATIONMN` varchar(50) DEFAULT NULL COMMENT '测站mn',
  `STATIONNAME` varchar(50) DEFAULT NULL COMMENT '测站名称',
  `CONTROLLEVEL` varchar(50) DEFAULT NULL COMMENT '控制级别1国控2省控3市控',
  `REGIONRANGETYPE` decimal(1,0) DEFAULT '1' COMMENT '区域范围类型1市2省3大区',
  `REGIONCODE` varchar(50) DEFAULT NULL COMMENT '区划代码',
  `AIRSTANDARDCODE` varchar(50) DEFAULT NULL COMMENT '大气执行标准',
  `DUSTSTANDARDCODE` varchar(50) DEFAULT NULL COMMENT '降尘执行标准',
  `WATERSTANDARDCODE` varchar(50) DEFAULT NULL COMMENT '降水执行标准',
  `NOISELEVELCODE` varchar(50) DEFAULT NULL COMMENT '噪声网管级别',
  `LONGITUDE` double DEFAULT NULL COMMENT '经度',
  `LATITUDE` double DEFAULT NULL COMMENT '纬度',
  `HEIGHT` double DEFAULT NULL COMMENT '高度',
  `STATIONTYPE` int(11) DEFAULT NULL COMMENT '测站类型1自营站点2抓取站点',
  `MONITORTYPE` varchar(50) DEFAULT NULL COMMENT '检测类型',
  `ISSUPPLEMENT` int(11) DEFAULT NULL COMMENT '是否支持补数1是0否',
  `VALIDTIME` datetime DEFAULT NULL COMMENT '生效时间',
  `INVALIDTIME` datetime DEFAULT NULL COMMENT '失效时间',
  `ORDERNUM` int(11) DEFAULT NULL COMMENT '排序',
  PRIMARY KEY (`STATIONCODE`)
) ENGINE=InnoDB AUTO_INCREMENT=1648 DEFAULT CHARSET=utf8 COMMENT='环境质量基础-环境质量测站基本信息';


/*Table structure for table `T_PS_BAS_POINTLIST` */

DROP TABLE IF EXISTS `T_PS_BAS_POINTLIST`;

CREATE TABLE `T_PS_BAS_POINTLIST` (
  `POINTCODE` int(11) NOT NULL COMMENT '排口编码',
  `PSCODE` int(11) NOT NULL COMMENT '污染源代码',
  `STDPOINTCODE` varchar(50) DEFAULT NULL COMMENT '标准排口代码',
  `POINTNAME` varchar(50) DEFAULT NULL COMMENT '排口名称',
  `SYSTEMTYPE` int(11) NOT NULL COMMENT '系统类型',
  `POINTPOSITION` varchar(50) DEFAULT NULL COMMENT '排口位置',
  `LONGITUDE` double DEFAULT NULL COMMENT '经度',
  `LATITUDE` double DEFAULT NULL COMMENT '维度',
  `ISAUTOMONITOR` int(11) DEFAULT NULL COMMENT '自动监测设备安装情况',
  `INDICATE` varchar(50) DEFAULT NULL COMMENT '标志牌安装形式',
  `STATUS` int(11) DEFAULT NULL COMMENT '排口状态1在线2离线',
  `CONTROLLEVEL` varchar(50) DEFAULT NULL COMMENT '控制级别',
  `VALLEYCODE` varchar(50) DEFAULT NULL COMMENT '所属流域',
  `REGIONCODE` varchar(50) DEFAULT NULL COMMENT '所在城市',
  `AREACODE` varchar(50) DEFAULT NULL COMMENT '所在区域',
  `MICYCLETIME` int(11) DEFAULT NULL COMMENT '分钟数据上报周期',
  `RTCYTLETIME` int(11) DEFAULT NULL COMMENT '实时数据上报周期',
  `LINKMAN` varchar(50) DEFAULT NULL COMMENT '联系人',
  `OFFICEPHONE` varchar(50) DEFAULT NULL COMMENT '联系电话',
  `PSADDRESS` varchar(50) DEFAULT NULL COMMENT '联系地址',
  `FAX` varchar(50) DEFAULT NULL COMMENT '传真',
  `EMAIL` varchar(50) DEFAULT NULL COMMENT '邮箱',
  `CREATETIME` datetime DEFAULT NULL COMMENT '创建时间',
  `UPDATETIME` datetime DEFAULT NULL COMMENT '更新时间',
  `DESCRIPTION` varchar(100) DEFAULT NULL COMMENT '描述',
  `DATASOURCE_CODE` int(11) DEFAULT NULL COMMENT '数据来源标识',
  `SCODE` int(11) DEFAULT NULL COMMENT '执行标准',
  `CODE_RULE` varchar(50) DEFAULT NULL COMMENT '排放规律扩展表对应废弃',
  `HASVIDEO` int(4) DEFAULT NULL COMMENT '排口视频【0：无视频，1有视频】',
  PRIMARY KEY (`POINTCODE`),
  KEY `FK_T_PS_BAS_REFERENCE_T_PS_B10` (`PSCODE`),
  CONSTRAINT `FK_T_PS_BAS_REFERENCE_T_PS_B10` FOREIGN KEY (`PSCODE`) REFERENCES `T_PS_BAS_ENTERLIST` (`PSCODE`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='污染源基础-排口表';


/*Table structure for table `T_PS_BAS_ENTERLIST` */

DROP TABLE IF EXISTS `T_PS_BAS_ENTERLIST`;

CREATE TABLE `T_PS_BAS_ENTERLIST` (
  `PSCODE` int(11) NOT NULL AUTO_INCREMENT COMMENT '污染物代码对应之前的orgid',
  `YEARMN` int(11) DEFAULT NULL COMMENT '年份',
  `STDPSCODE` varchar(50) DEFAULT NULL COMMENT '标准污染源代码',
  `PSNAME` varchar(100) DEFAULT NULL COMMENT '污染源名称',
  `ENTERNAME` varchar(100) DEFAULT NULL COMMENT '企业名称',
  `HISNAME` varchar(100) DEFAULT NULL COMMENT '企业曾用名称',
  `CORPCODE` varchar(50) DEFAULT NULL COMMENT '法人代码',
  `CORPNAME` varchar(50) DEFAULT NULL COMMENT '法人代表名称',
  `ORGANIZATIONCODE` varchar(50) DEFAULT NULL COMMENT '组织机构代码',
  `ENTERADDRESS` varchar(100) DEFAULT NULL COMMENT '企业地址',
  `CODE_REGION_SHENG` varchar(20) DEFAULT NULL COMMENT '所属省份',
  `CODE_REGION_SHI` varchar(20) DEFAULT NULL COMMENT '所属地市',
  `CODE_REGION_XIAN` varchar(20) DEFAULT NULL COMMENT '所属区县',
  `CODE_STREET` varchar(50) DEFAULT NULL COMMENT '所属街道',
  `LINKMAN` varchar(20) DEFAULT NULL COMMENT '联系人',
  `TEL` varchar(20) DEFAULT NULL COMMENT '电话号码',
  `PHONE` varchar(20) DEFAULT NULL COMMENT '手机',
  `FAX` varchar(20) DEFAULT NULL COMMENT '传真',
  `EMAIL` varchar(50) DEFAULT NULL COMMENT '邮箱',
  `POSTALCODE` varchar(20) DEFAULT NULL COMMENT '邮政编码',
  `LONGITUDE` double DEFAULT NULL COMMENT '经度',
  `LATITUDE` double DEFAULT NULL COMMENT '维度',
  `WEBSITE` varchar(50) DEFAULT NULL COMMENT '企业网址',
  `AREAID` varchar(50) DEFAULT NULL COMMENT '所属行政区域id',
  `CODE_TRADE` varchar(50) DEFAULT NULL COMMENT '所属行业类代码',
  `CODE_WSYSTEM` varchar(50) DEFAULT NULL COMMENT '所属流域代码',
  `GROUPCOMPANYCODE` varchar(50) DEFAULT NULL COMMENT '所属集团公司代码',
  `CODE_INDUSTRIALPARK` varchar(50) DEFAULT NULL COMMENT '所在工业园区代码',
  `CODE_ENTERSIZE` varchar(50) DEFAULT NULL COMMENT '企业规模代码',
  `CODE_REGISTERTYPE` varchar(50) DEFAULT NULL COMMENT '登记注册类型',
  `CODE_ENTERTYPE` int(11) DEFAULT NULL COMMENT '企业类型1、工业污染源、2污水处理厂、3、固（危）废处理厂4住宿、餐饮服务业5居民服务及其它行业 6 7 机关、事业单位独立燃烧9垃圾处理厂10医疗废物处理厂',
  `CODE_CONTROLLEVEL` varchar(50) DEFAULT NULL COMMENT '污染源控制级别代码',
  `ENTERTYPE_CODE` varchar(50) DEFAULT NULL COMMENT '污染源类型代码-工业、农业等污染源',
  `WATEROUTCOUNT` int(11) DEFAULT NULL COMMENT '废水排放口数',
  `GASOUTCOUNT` int(11) DEFAULT NULL COMMENT '废气排放口数',
  `CODE_QUALIFICATION` varchar(50) DEFAULT NULL COMMENT '单位资质',
  `CREATETIME` datetime DEFAULT NULL COMMENT '创建时间',
  `STOPTIME` datetime DEFAULT NULL COMMENT '停业时间',
  `LATEUPDATETIME` datetime DEFAULT NULL COMMENT '最新改建时间',
  `VALIDTIME` datetime DEFAULT NULL COMMENT '生效时间',
  `INVALIDTIME` datetime DEFAULT NULL COMMENT '失效时间',
  `ENABLESTATUS` int(11) DEFAULT NULL COMMENT '是否有效',
  `ENVRIONLINKMEN` varchar(50) DEFAULT NULL COMMENT '环保联系人名称',
  `ENVIRONTEL` varchar(50) DEFAULT NULL COMMENT '环保联系人电话',
  `ENVIRONFAX` varchar(50) DEFAULT NULL COMMENT '环保联系人传真',
  `ENVIRONPHONE` varchar(50) DEFAULT NULL COMMENT '环保联系人手机',
  `BANKNAME` varchar(100) DEFAULT NULL COMMENT '银行名称',
  `BANKCODE` varchar(50) DEFAULT NULL COMMENT '银行账户',
  `ENABLESTATE` int(11) DEFAULT NULL COMMENT '是否有效(账户)',
  `MAINPRODUCT` varchar(100) DEFAULT NULL COMMENT '主要产品',
  `PRODUCTIONSTATE` varchar(50) DEFAULT NULL COMMENT '生产状态',
  `DECLARECODE` varchar(50) DEFAULT NULL COMMENT '排污申报登记号',
  `OUTPERMITCODE` varchar(50) DEFAULT NULL COMMENT '排污许可证编号',
  `ONLINECHKFLAG` int(11) DEFAULT NULL COMMENT '是否在线监控',
  `CHANGEORDERSID` int(11) DEFAULT NULL COMMENT '变更单号',
  `DATASOURCE_CODE` int(11) DEFAULT NULL COMMENT '数据来源标识',
  `REMARK` varchar(200) DEFAULT NULL COMMENT '备注',
  `UPDATETIME` datetime DEFAULT NULL COMMENT '更新时间',
  `MOINTORDEPTID` int(11) DEFAULT NULL COMMENT '监管单位ID',
  PRIMARY KEY (`PSCODE`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COMMENT='污染源基本信息';

/* Procedure structure for procedure `P_BAS_AUDITRT` */

/*!50003 DROP PROCEDURE IF EXISTS  `P_BAS_AUDITRT` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `P_BAS_AUDITRT`()
BEGIN
	DECLARE v_table_s VARCHAR(30) DEFAULT NULL; 	-- 原表
	DECLARE v_table_d VARCHAR(30) DEFAULT NULL; 	-- 目标表
	DECLARE v_ly_table_s VARCHAR(30) DEFAULT NULL; 	-- 原表-上年
	DECLARE v_ly_table_d VARCHAR(30) DEFAULT NULL; 	-- 目标表-上年
	
	declare v_month_day varchar(4);			-- 年月
	DECLARE v_count INT default 0;			-- 计数
	declare cur_count int;				-- 游标计数
	-- 一些赋值操作
	set v_month_day=CONCAT(EXTRACT(MONTH FROM NOW()),EXTRACT(DAY FROM NOW()));
	set cur_count=0;
	
	SELECT COUNT(1) INTO v_count
		FROM V_BAS_POINTSITE_INFO V1 JOIN T_DIC_POINTSYSTYPE T1 ON(V1.SYSTEMTYPE=T1.SYSTEMTYPE)
		WHERE V1.`SYSTEMTYPE` IS NOT NULL AND T1.`ATNAMERT` IS NOT NULL AND T1.`TNAMERT` IS NOT NULL limit 1;
	IF v_count>0 THEN -- 如果有记录
		BEGIN
		DECLARE no_more_times INTEGER DEFAULT 0;  	-- 定义游标遍历时，作为判断是否遍历完全部记录的标记
		DECLARE cur_type CURSOR FOR 			-- 获取需要的游标列表
			SELECT distinct CONCAT(T1.TNAMERT,YEAR(NOW()),V1.POINTCODE) CRT,CONCAT(T1.ATNAMERT,YEAR(NOW()),V1.POINTCODE) ART,
				CONCAT(T1.TNAMERT,YEAR(DATE_ADD(NOW(),INTERVAL -1 DAY)),V1.POINTCODE) LY_CRT,
				CONCAT(T1.ATNAMERT,YEAR(DATE_ADD(NOW(),INTERVAL -1 DAY)),V1.POINTCODE) LY_ART
				FROM V_BAS_POINTSITE_INFO V1 JOIN T_DIC_POINTSYSTYPE T1 ON(V1.SYSTEMTYPE=T1.SYSTEMTYPE)
				WHERE V1.`SYSTEMTYPE` IS NOT NULL AND T1.`ATNAMERT` IS NOT NULL AND T1.`TNAMERT` IS NOT NULL;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_times=1;
		-- 循环执行审核操作
		OPEN cur_type;
		REPEAT
			FETCH cur_type INTO v_table_s,v_table_d,v_ly_table_s,v_ly_table_d;
			if no_more_times=0 then
				if v_month_day <> '11' then  -- 非1月1日处理
					begin
						 SET @STMT:=CONCAT("REPLACE INTO ",v_table_d,
								"(POINTCODE,POLLUTECODE,DATATIME,DATAVALUE,UPDATETIME,ISVALID)
								SELECT T1.POINTCODE,
									T1.POLLUTECODE,
									T1.DATATIME,
									-- T1.SYSTEMTYPE,
									DATAVALUE,
									NOW(),
									CASE WHEN T1.DATAFLAG='T' THEN 'IV' ELSE 'V' END AS ISVALID
								  FROM ",v_table_s," T1 
								  WHERE T1.DATATIME>=DATE_ADD(NOW(),INTERVAL -1 DAY);"); 
						 -- SELECT @STMT;
						 PREPARE STMT FROM @STMT;   
						 EXECUTE STMT;
					 end;
				 else
					 begin
						-- 当天的
						SET @STMT:=CONCAT("REPLACE INTO ",v_table_d,
								"(POINTCODE,POLLUTECODE,DATATIME,DATAVALUE,UPDATETIME,ISVALID)
								SELECT T1.POINTCODE,
									T1.POLLUTECODE,
									T1.DATATIME,
									-- T1.SYSTEMTYPE,
									DATAVALUE,
									NOW(),
									CASE WHEN T1.DATAFLAG='T' THEN 'IV' ELSE 'V' END AS ISVALID
								  FROM ",v_table_s," T1 
								  WHERE T1.DATATIME>=DATE_ADD(NOW(),INTERVAL -1 DAY);"); 
						 -- SELECT @STMT;
						 PREPARE STMT FROM @STMT;   
						 EXECUTE STMT;
						 
						 -- 上年最后一天的
						SET @STMT:=CONCAT("REPLACE INTO ",v_ly_table_d,
								"(POINTCODE,POLLUTECODE,DATATIME,DATAVALUE,UPDATETIME,ISVALID)
								SELECT T1.POINTCODE,
									T1.POLLUTECODE,
									T1.DATATIME,
									-- T1.SYSTEMTYPE,
									DATAVALUE,
									NOW(),
									CASE WHEN T1.DATAFLAG='T' THEN 'IV' ELSE 'V' END AS ISVALID
								  FROM ",v_ly_table_s," T1 
								  WHERE T1.DATATIME>=DATE_ADD(NOW(),INTERVAL -2 DAY);"); 
						 -- SELECT @STMT;
						 PREPARE STMT FROM @STMT;   
						 EXECUTE STMT;
					 end;
				 end if;
			end if; -- 判断循环是否结束
		UNTIL no_more_times  END REPEAT;    -- 语句结束
		CLOSE cur_type; -- 结束
		END;
	END IF; -- 结束count
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `P_BAS_INIT_STATION` */

/*!50003 DROP PROCEDURE IF EXISTS  `P_BAS_INIT_STATION` */;

DELIMITER $$

/*!50003 CREATE  PROCEDURE `P_BAS_INIT_STATION`()
BEGIN
	DECLARE v_pointmn VARCHAR(50);
	DECLARE v_systemtype INT;
	DECLARE v_count INT;
	
	DECLARE v_stationname NATIONAL VARCHAR(50) DEFAULT '新增加测站--污染源1';
	DECLARE v_pointname NATIONAL VARCHAR(50) DEFAULT '新增加测点--排口1-';
	DECLARE v_max_point	INT;		-- 最大测点
	
	DECLARE v_station_t NATIONAL VARCHAR(50) ;
	DECLARE v_point_t NATIONAL VARCHAR(50) ;
	DECLARE v_c1 NATIONAL VARCHAR(50);
	DECLARE v_c2 NATIONAL VARCHAR(50);
	
	SELECT COUNT(1) INTO v_count FROM T_DATA_MOVE_STATION  LIMIT 1;
	IF v_count>0 THEN -- 如果有记录
		BEGIN
		DECLARE no_more_station INTEGER DEFAULT 0;  -- 定义游标遍历时，作为判断是否遍历完全部记录的标记
		DECLARE cur_station CURSOR FOR 
			SELECT POINTMN,SYSTEMTYPE FROM T_DATA_MOVE_STATION 
			WHERE pointmn NOT IN
		   (SELECT STDPOINTCODE FROM V_BAS_POINTSITE_INFO WHERE STDPOINTCODE IS NOT NULL) 
		ORDER BY systemtype;
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_station=1;
		OPEN cur_station;
		REPEAT
		
			FETCH cur_station INTO v_pointmn,v_systemtype;
			SET v_station_t :=NULL; -- 防止字典表没记录
			SELECT SNAME,PNAME,C1,C2 INTO v_station_t,v_point_t,v_c1,v_c2 FROM T_DIC_POINTSYSTYPE 
			WHERE SYSTEMTYPE=v_systemtype AND SNAME IS NOT NULL AND PNAME IS NOT NULL LIMIT 1;
			-- SELECT TNAMEMI INTO v_tablemi FROM T_DIC_POINTSYSTYPE WHERE SYSTEMTYPE=v_systype LIMIT 1;
			if no_more_station=0 then
				IF v_station_t IS NOT NULL AND v_point_t IS NOT NULL THEN
					SET @STMT:=CONCAT("INSERT INTO ",v_station_t,
									"(",v_c1,")
									"," values('",v_stationname,"');");
									
					PREPARE STMT FROM @STMT;   
					EXECUTE STMT;
					SELECT MAX(POINTCODE)+1 INTO v_max_point
						FROM V_BAS_POINTSITE_INFO;
					if v_point_t='T_PS_BAS_POINTLIST' then
					begin
					SET @STMT:=CONCAT("INSERT INTO ",v_point_t,
									"(POINTCODE,",v_c2,",STDPOINTCODE,POINTNAME,SYSTEMTYPE)
									"," values(",v_max_point,",LAST_INSERT_ID(),'",v_pointmn,"','",v_pointname,"',",v_systemtype,");"); 
					 
					 PREPARE STMT FROM @STMT;   
					 EXECUTE STMT;
					 end;
					else
					begin
					SET @STMT:=CONCAT("INSERT INTO ",v_point_t,
									"(POINTCODE,",v_c2,",STDPOINTCODE,POINTNAME)
									"," values(",v_max_point,",LAST_INSERT_ID(),'",v_pointmn,"','",v_pointname,v_pointmn,"');"); 
					 PREPARE STMT FROM @STMT;   
					 EXECUTE STMT;
					end;
					end if;
					
				END IF;
			end if; -- 结束循环
		UNTIL no_more_station END REPEAT; -- 结束循环
		CLOSE cur_station; -- 
		END;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `P_BAS_INIT_TAB` */

/*!50003 DROP PROCEDURE IF EXISTS  `P_BAS_INIT_TAB` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `P_BAS_INIT_TAB`(STYPE INT)
BEGIN
/*
function:初始化实时，分钟数据表，目前只支持空气站22类型的，2016-12-01 修订 通用类型，请先配置字典表T_DIC_POINTSYSTYPE
date	:2016-10-24
author	:gel
*/
	-- START TRANSACTION;
	DECLARE v_sql VARCHAR(500);   		-- 动态sql
	
	declare v_t_rt varchar(50);		-- 原始rt
	declare v_t_mi VARCHAR(50);		-- 原始mi
	DECLARE v_at_rt VARCHAR(50);		-- 审核rt
	DECLARE v_at_mi VARCHAR(50);		-- 审核mi
	
	-- 实时数据
	DECLARE v_rt_t VARCHAR(50) DEFAULT 'T_ENV_MONI_AIR_DATART';		-- 实时表
	DECLARE v_pk_rt_t VARCHAR(50) DEFAULT 'PK_T_ENVAIRRT';			-- 实时表主键 用
	DECLARE v_rt_au_t VARCHAR(50) default 'T_ENV_MONI_AIR_AUDRT';		-- 审核表 审核数据使用分区表
	DECLARE v_pk_rt_au_t VARCHAR(50) default 'PK_T_ENVAIRAUDRT'; 		-- 审核表主键
	
	DECLARE v_rt_t_c VARCHAR(50);						-- 组合后实时表
	DECLARE v_pk_rt_t_c VARCHAR(50);					-- 组合后实时表主键
	DECLARE v_rt_au_t_c VARCHAR(50);					-- 组合后实时审核表
	DECLARE v_pk_rt_au_t_c VARCHAR(50); 					-- 组合后实时审核表主键	
	
	DECLARE v_sitec INT;							-- 统计站点数
	DECLARE v_pointcode INT;						-- 站点
	
	-- 分钟数据
	DECLARE v_mi_t VARCHAR(50) DEFAULT 'T_ENV_MONI_AIR_DATAMI';		-- 分钟表
	DECLARE v_pk_mi_t VARCHAR(50) DEFAULT 'PK_T_ENVAIRMI';			-- 分钟表主键
	DECLARE v_mi_au_t VARCHAR(50) default 'T_ENV_MONI_AIR_AUDMI';		-- 审核表
	DECLARE v_pk_mi_au_t VARCHAR(50) DEFAULT'PK_T_ENVAIRAUDMI';		-- 审核表主键
	
	DECLARE v_mi_t_c VARCHAR(50);						-- 组合后分钟表
	DECLARE v_pk_mi_t_c VARCHAR(50);					-- 组合后分钟表主键
	DECLARE v_mi_t_n VARCHAR(50);						-- 组合下月分钟表
	DECLARE v_pk_mi_t_n VARCHAR(50); 					-- 组合下月表主键	
	
	DECLARE c_date DATE DEFAULT CURDATE();					-- 当前日期
	DECLARE c_year INT DEFAULT YEAR(c_date);				-- 年份
	DECLARE c_nyear INT DEFAULT c_year+1;					-- 下一年
	DECLARE c_month INT DEFAULT MONTH(c_date);				-- 月份
	DECLARE c_nn	INT DEFAULT c_month+1;
	DECLARE c_nmonth VARCHAR(10);						-- 下个月份字符
	-- 当月
	IF  c_month>=10 AND c_nmonth<=12 THEN
		SET c_month=c_month;
	ELSE
		SET c_month=CONCAT('0',c_month);
	END IF;
	-- 下月数据
	IF c_nn=13 THEN
		SET c_nmonth='01';
	ELSEIF c_nn>=10 AND c_nn<=12 THEN
		SET c_nmonth=c_nn;
	ELSE
		SET c_nmonth=CONCAT('0',c_nn);
	END IF;
	
	-- 判断系统类型
	BEGIN
		SELECT TNAMERT,TNAMEMI,ATNAMERT,ATNAMEMI into v_t_rt,v_t_mi,v_at_rt,v_at_mi FROM T_DIC_POINTSYSTYPE 
			WHERE SYSTEMTYPE=STYPE AND TNAMERT IS NOT NULL AND TNAMEMI IS NOT NULL LIMIT 1;
		SELECT  COUNT(1) INTO v_sitec FROM V_BAS_POINTSITE_INFO where SYSTEMTYPE=STYPE;
		IF v_sitec>0 THEN
			BEGIN
				DECLARE no_more_points INTEGER DEFAULT 0;  -- 定义游标遍历时，作为判断是否遍历完全部记录的标记
				DECLARE cur_pointcode CURSOR FOR SELECT POINTCODE FROM V_BAS_POINTSITE_INFO WHERE systemtype=stype; -- 后期要据
				DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_points=1;	
			
				-- 循环创建实时数据表
				OPEN cur_pointcode;
				REPEAT
					FETCH cur_pointcode INTO v_pointcode;
						-- select v_t_rt,v_t_mi,v_at_rt,v_at_mi;
						-- 当年实时数据处理
						SET v_rt_t_c=CONCAT(v_t_rt,c_year,v_pointcode);
						SET v_pk_rt_t_c=CONCAT('PK_',right(v_rt_t_c,25));
						-- SELECT v_rt_t_c,v_pk_rt_t_c;
						SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_rt_t_c,
						"(POINTCODE  INT NOT NULL COMMENT '测点代码',
							POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
							DATATIME             DATETIME NOT NULL COMMENT '日期',
							DATAVALUE            DOUBLE COMMENT '均值',
							ROUNDINGOFFVALUE     DOUBLE COMMENT '修约值',
							UPDATETIME           DATETIME COMMENT '更新时间',
							DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
							CONSTRAINT ",v_pk_rt_t_c,
							" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
							,";"); 
						PREPARE STMT FROM @STMT;   
						EXECUTE STMT;
							
						-- 当年实时审核数据处理
						SET v_rt_au_t_c=CONCAT(v_at_rt,c_year,v_pointcode);
						SET v_pk_rt_au_t_c=CONCAT('PK_',RIGHT(v_rt_au_t_c,25));
						-- SELECT v_rt_t_c,v_pk_rt_t_c;
						SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_rt_au_t_c,
						"(POINTCODE  INT NOT NULL COMMENT '测点代码',
							POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
							DATATIME             DATETIME NOT NULL COMMENT '日期',
							DATAVALUE            DOUBLE COMMENT '均值',
							UPDATETIME           DATETIME COMMENT '更新时间',
							ISVALID             NATIONAL VARCHAR(50) COMMENT '数据标识位',
							CONSTRAINT ",v_pk_rt_au_t_c,
							" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
							,";"); 
						PREPARE STMT FROM @STMT;   
						EXECUTE STMT;
						
						IF c_month=12 THEN -- 对12月份进行判断
							BEGIN
								-- 明年实时数据
								SET v_rt_t_c=CONCAT(v_t_rt,c_nyear,v_pointcode);
								SET v_pk_rt_t_c=CONCAT('PK_',RIGHT(v_rt_t_c,25));
								-- SELECT v_rt_t_c,v_pk_rt_t_c;
								SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_rt_t_c,
								"(POINTCODE  INT NOT NULL COMMENT '测点代码',
									POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
									DATATIME             DATETIME NOT NULL COMMENT '日期',
									DATAVALUE            DOUBLE COMMENT '均值',
									ROUNDINGOFFVALUE     DOUBLE COMMENT '修约值',
									UPDATETIME           DATETIME COMMENT '更新时间',
									DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
									CONSTRAINT ",v_pk_rt_t_c,
									" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
									,";"); 
								PREPARE STMT FROM @STMT;   
								EXECUTE STMT;
								
								-- 明年实时审核数据
								SET v_rt_au_t_c=CONCAT(v_at_rt,c_nyear,v_pointcode);
								SET v_pk_rt_au_t_c=CONCAT('PK_',RIGHT(v_rt_au_t_c,25));
								-- SELECT v_rt_au_t_c,v_pk_rt_au_t_c,v_at_rt,v_pointcode;
								SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_rt_au_t_c,
								"(POINTCODE  INT NOT NULL COMMENT '测点代码',
									POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
									DATATIME             DATETIME NOT NULL COMMENT '日期',
									DATAVALUE            DOUBLE COMMENT '均值',
									UPDATETIME           DATETIME COMMENT '更新时间',
									ISVALID             NATIONAL VARCHAR(50) COMMENT '数据标识位',
									CONSTRAINT ",v_pk_rt_au_t_c,
									" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
									,";"); 
								PREPARE STMT FROM @STMT;   
								EXECUTE STMT;
							end;
						end if;
						
				UNTIL no_more_points  END REPEAT;    -- 语句结束
				CLOSE cur_pointcode;
				
				-- 分钟数据处理
					IF c_month=12 THEN
						BEGIN
						-- 分钟当月数据表处理
							SET v_mi_t_c=CONCAT(v_t_mi,c_year,c_month);
							SET v_pk_mi_t_c=CONCAT('PK_',RIGHT(v_mi_t_c,25));
							-- SELECT v_mi_t_c,v_pk_mi_t_c,1;
							SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_mi_t_c,
							"(POINTCODE  INT NOT NULL COMMENT '测点代码',
								POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
								DATATIME             DATETIME NOT NULL COMMENT '日期',
								`MAXVALUE`             DOUBLE comment '最大值',
								`MINVALUE`             DOUBLE comment '最小值',
								DATAVALUE            DOUBLE COMMENT '均值',
								ROUNDINGOFFVALUE     DOUBLE COMMENT '修约值',
								UPDATETIME           DATETIME COMMENT '更新时间',
								DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
								CONSTRAINT ",v_pk_mi_t_c,
								" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
								,";"); 
							PREPARE STMT FROM @STMT;   
							EXECUTE STMT;
							
							-- 分钟当月审核数据表处理
							SET v_mi_t_c=CONCAT(v_at_mi,c_year,c_month);
							SET v_pk_mi_t_c=CONCAT('PK_',RIGHT(v_mi_t_c,25));
							-- SELECT v_mi_t_c,v_pk_mi_t_c,2;
							SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_mi_t_c,
							"(POINTCODE  INT NOT NULL COMMENT '测点代码',
								POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
								DATATIME             DATETIME NOT NULL COMMENT '日期',
								`MAXVALUE`             DOUBLE comment '最大值',
								`MINVALUE`             DOUBLE comment '最小值',
								DATAVALUE            DOUBLE COMMENT '均值',
								ROUNDINGOFFVALUE     DOUBLE COMMENT '修约值',
								UPDATETIME           DATETIME COMMENT '更新时间',
								DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
								CONSTRAINT ",v_pk_mi_t_c,
								" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
								,";"); 
							PREPARE STMT FROM @STMT;   
							EXECUTE STMT;
							
							-- 分钟下月数据表处理
							SET v_mi_t_n=CONCAT(v_t_mi,c_nyear,c_nmonth);
							SET v_pk_mi_t_n=CONCAT('PK_',RIGHT(v_mi_t_n,25));
							-- SELECT v_mi_t_n,v_pk_mi_t_n,3;
							SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_mi_t_n,
							"(POINTCODE  INT NOT NULL COMMENT '测点代码',
								POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
								DATATIME             DATETIME NOT NULL COMMENT '日期',
								`MAXVALUE`             DOUBLE comment '最大值',
								`MINVALUE`             DOUBLE comment '最小值',
								DATAVALUE            DOUBLE COMMENT '均值',
								ROUNDINGOFFVALUE     DOUBLE COMMENT '修约值',
								UPDATETIME           DATETIME COMMENT '更新时间',
								DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
								CONSTRAINT ",v_pk_mi_t_n,
								" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
								,";"); 
							PREPARE STMT FROM @STMT;   
							EXECUTE STMT;
							
							-- 分钟下月审核数据表处理
							SET v_mi_t_n=CONCAT(v_at_mi,c_nyear,c_nmonth);
							SET v_pk_mi_t_n=CONCAT('PK_',RIGHT(v_mi_t_n,25));
							-- SELECT v_mi_t_n,v_pk_mi_t_n,4;
							SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_mi_t_n,
							"(POINTCODE  INT NOT NULL COMMENT '测点代码',
								POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
								DATATIME             DATETIME NOT NULL COMMENT '日期',
								`MAXVALUE`             DOUBLE comment '最大值',
								`MINVALUE`             DOUBLE comment '最小值',
								DATAVALUE            DOUBLE COMMENT '均值',
								ROUNDINGOFFVALUE     DOUBLE COMMENT '修约值',
								UPDATETIME           DATETIME COMMENT '更新时间',
								DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
								CONSTRAINT ",v_pk_mi_t_n,
								" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
								,";"); 
							PREPARE STMT FROM @STMT;   
							EXECUTE STMT;			
						END;
					ELSE
						BEGIN
							-- 分钟当月数据表处理
							SET v_mi_t_c=CONCAT(v_t_mi,c_year,c_month);
							SET v_pk_mi_t_c=CONCAT('PK_',RIGHT(v_mi_t_c,25));
							-- SELECT v_rt_t_c,v_pk_rt_t_c;
							SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_mi_t_c,
							"(POINTCODE  INT NOT NULL COMMENT '测点代码',
								POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
								DATATIME             DATETIME NOT NULL COMMENT '日期',
								`MAXVALUE`             DOUBLE comment '最大值',
								`MINVALUE`             DOUBLE comment '最小值',
								DATAVALUE            DOUBLE COMMENT '均值',
								ROUNDINGOFFVALUE     DOUBLE COMMENT '修约值',
								UPDATETIME           DATETIME COMMENT '更新时间',
								DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
								CONSTRAINT ",v_pk_mi_t_c,
								" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
								,";"); 
							PREPARE STMT FROM @STMT;   
							EXECUTE STMT;
							
							-- 分钟当月审核数据表处理
							SET v_mi_t_c=CONCAT(v_at_mi,c_year,c_month);
							SET v_pk_mi_t_c=CONCAT('PK_',RIGHT(v_mi_t_c,25));
							-- SELECT v_rt_t_c,v_pk_rt_t_c;
							SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_mi_t_c,
							"(POINTCODE  INT NOT NULL COMMENT '测点代码',
								POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
								DATATIME             DATETIME NOT NULL COMMENT '日期',
								`MAXVALUE`             DOUBLE comment '最大值',
								`MINVALUE`             DOUBLE comment '最小值',
								DATAVALUE            DOUBLE COMMENT '均值',
								UPDATETIME           DATETIME COMMENT '更新时间',
								DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
								CONSTRAINT ",v_pk_mi_t_c,
								" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
								,";"); 
							PREPARE STMT FROM @STMT;   
							EXECUTE STMT;
							
							-- 分钟下月数据表处理
							SET v_mi_t_n=CONCAT(v_t_mi,c_year,c_nmonth);
							SET v_pk_mi_t_n=CONCAT('PK_',RIGHT(v_mi_t_n,25));
							-- SELECT v_rt_t_c,v_pk_rt_t_c;
							SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_mi_t_n,
							"(POINTCODE  INT NOT NULL COMMENT '测点代码',
								POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
								DATATIME             DATETIME NOT NULL COMMENT '日期',
								`MAXVALUE`             DOUBLE comment '最大值',
								`MINVALUE`             DOUBLE comment '最小值',
								DATAVALUE            DOUBLE COMMENT '均值',
								ROUNDINGOFFVALUE     DOUBLE COMMENT '修约值',
								UPDATETIME           DATETIME COMMENT '更新时间',
								DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
								CONSTRAINT ",v_pk_mi_t_n,
								" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
								,";"); 
							PREPARE STMT FROM @STMT;   
							EXECUTE STMT;
							
							-- 分钟下月审核数据表处理
							SET v_mi_t_n=CONCAT(v_at_mi,c_year,c_nmonth);
							SET v_pk_mi_t_n=CONCAT('PK_',RIGHT(v_mi_t_n,25));
							-- SELECT v_rt_t_c,v_pk_rt_t_c;
							SET @STMT:=CONCAT("CREATE TABLE IF NOT EXISTS ",v_mi_t_n,
							"(POINTCODE  INT NOT NULL COMMENT '测点代码',
								POLLUTECODE NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
								DATATIME             DATETIME NOT NULL COMMENT '日期',
								`MAXVALUE`             DOUBLE comment '最大值',
								`MINVALUE`             DOUBLE comment '最小值',
								DATAVALUE            DOUBLE COMMENT '均值',
								UPDATETIME           DATETIME COMMENT '更新时间',
								DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
								CONSTRAINT ",v_pk_mi_t_n,
								" PRIMARY KEY (POINTCODE, POLLUTECODE, DATATIME))"
								,";"); 
							PREPARE STMT FROM @STMT;   
							EXECUTE STMT;
						END;
					END IF;	
			END;
		END IF;
	END;
	-- COMMIT;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `P_BAS_INIT_TEP_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `P_BAS_INIT_TEP_TABLE` */;

DELIMITER $$

/*!50003 CREATE  PROCEDURE `P_BAS_INIT_TEP_TABLE`()
BEGIN
		drop table if exists T_DATA_MOVE_GOLBAL;
		CREATE TEMPORARY TABLE if not exists T_DATA_MOVE_GOLBAL
		(
		   POINTCODE            INT NOT NULL COMMENT '测点代码',
		   POLLUTECODE          NATIONAL VARCHAR(50) NOT NULL COMMENT '监测项目代码',
		   DATATIME             DATETIME NOT NULL COMMENT '日期',
		   SYSTEMTYPE           INT COMMENT '系统类型',
		   DATAVALUE            DOUBLE COMMENT '均值',
		   VALUEMAX             DOUBLE COMMENT '最大值',
		   VALUEMIN             DOUBLE COMMENT '最小值',
		   UPDATETIME           DATETIME COMMENT '更新时间',
		   DATAFLAG             NATIONAL VARCHAR(50) COMMENT '数据标识位',
		   DATATYPE             CHAR(1) COMMENT '数据类型'
		);
		
		drop table if exists T_DATA_MOVE_STATION;
		create temporary table IF NOT EXISTS T_DATA_MOVE_STATION
		(
		   POINTMN              national varchar(50) not null comment '测点MN',
		   SYSTEMTYPE           int not null comment '系统类型',
		   DATATIME             datetime default CURRENT_TIMESTAMP comment '数据时间'
		);
		alter table T_DATA_MOVE_STATION comment '站点入库全局临时表';
    END */$$
DELIMITER ;

/* Procedure structure for procedure `P_BAS_MOVE_DATA` */

/*!50003 DROP PROCEDURE IF EXISTS  `P_BAS_MOVE_DATA` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `P_BAS_MOVE_DATA`(
 IN vDataType VARCHAR(10),-- 数据类型
 OUT vResult  VARCHAR(2) -- 是否成功标识
)
BEGIN
	DECLARE v_table VARCHAR(30) DEFAULT NULL;
	DECLARE v_systype int default 0;
	DECLARE v_count INT default 0;
	
	-- test code
	declare v_stime datetime;
	declare v_count1 int;
	set v_stime=now();
	START TRANSACTION;
	IF vDataType = 'R' THEN -- 实时数据处理
		BEGIN
		 select count(1) into v_count1 from  T_DATA_MOVE_GOLBAL where DATATYPE ='R';
		REPLACE INTO T_BAS_DATART_MID(pointcode,pollutecode,datatime,systemtype,datavalue,updatetime,dataflag)
		 SELECT T1.POINTCODE,
			T1.POLLUTECODE,
			T1.DATATIME,
			T1.SYSTEMTYPE,
			MAX(T1.DATAVALUE) DATAVALUE,
			MAX(T1.updatetime) updatetime,
			MAX(T1.DATAFLAG) DATAFLAG
		  FROM T_DATA_MOVE_GOLBAL T1 
		  WHERE T1.DATATYPE ='R'
		  GROUP BY T1.POINTCODE,T1.DATATIME, T1.POLLUTECODE,T1.SYSTEMTYPE;
		-- 最新实时数据处理
		REPLACE T_BAS_DATALATEST(POINTCODE,POLLUTECODE,DATATIME,DATAVALUE,updatetime,DATAFLAG)
			SELECT T1.POINTCODE,
				T1.POLLUTECODE,
				-- T1.SYSTEMTYPE,
				MAX(T1.DATATIME) DATATIME,
				MAX(T1.DATAVALUE) DATAVALUE,
				MAX(T1.updatetime) updatetime,
				MAX(T1.DATAFLAG) DATAFLAG
			  FROM T_DATA_MOVE_GOLBAL T1 
			  WHERE T1.DATATYPE ='R'
			  GROUP BY T1.POINTCODE, T1.POLLUTECODE;
		  INSERT INTO T_TIME VALUES(v_stime,NOW(),TIMESTAMPDIFF(SECOND,v_stime,NOW()),'R',v_count1);
		END;
	ELSEIF vDataType = 'M' THEN -- 分钟数据处理
	-- T_ENV_MONI_AIR_DATAMI
		BEGIN
			DECLARE v_time_ym VARCHAR(6);
			DECLARE v_count INT;
			DECLARE v_systype INT;
			DECLARE v_tablemi VARCHAR(30);
			SELECT COUNT(1) INTO v_count FROM T_DATA_MOVE_GOLBAL WHERE datatype='M'  LIMIT 1;
			IF v_count>0 THEN -- 如果有记录
				BEGIN
				DECLARE no_more_times INTEGER DEFAULT 0;  -- 定义游标遍历时，作为判断是否遍历完全部记录的标记
				DECLARE cur_time CURSOR FOR 
					SELECT  DISTINCT DATE_FORMAT(datatime, '%Y%m'),systemtype FROM T_DATA_MOVE_GOLBAL WHERE datatype='M';
				DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_times=1;
				OPEN cur_time;
				REPEAT
					FETCH cur_time INTO v_time_ym,v_systype;
					if no_more_times<>1 then
					
						SELECT TNAMEMI INTO v_tablemi FROM T_DIC_POINTSYSTYPE WHERE SYSTEMTYPE=v_systype LIMIT 1;
						SET @STMT:=CONCAT("REPLACE INTO ",v_tablemi,v_time_ym,
								"(POINTCODE,POLLUTECODE,DATATIME,`MAXVALUE`,`MINVALUE`,DATAVALUE,UPDATETIME,DATAFLAG)
								SELECT T1.POINTCODE,
									T1.POLLUTECODE,
									T1.DATATIME,
									-- T1.SYSTEMTYPE,
									MAX(T1.DATAVALUE) AS `MAXVALUE`,
									MAX(T1.DATAVALUE) AS `MINVALUE`,
									MAX(T1.DATAVALUE) AS DATAVALUE,
									MAX(T1.UPDATETIME) AS UPDATETIME,
									MAX(T1.DATAFLAG) AS DATAFLAG
								  FROM T_DATA_MOVE_GOLBAL T1 
								  WHERE T1.DATATYPE ='M' AND DATE_FORMAT(T1.datatime,'%Y%m')='",v_time_ym,"' and 
								  T1.SYSTEMTYPE=",v_systype,
									" GROUP BY T1.POINTCODE,T1.DATATIME, T1.POLLUTECODE"
									,";"); 
					
						PREPARE STMT FROM @STMT;   
						EXECUTE STMT;
					end if;
				UNTIL no_more_times END REPEAT; -- 结束循环
				CLOSE cur_time; -- 
				END;
			END IF;
		END;
	ELSEIF vDataType = 'H' THEN -- 小时数据处理
		begin
			SELECT COUNT(1) INTO v_count FROM T_DATA_MOVE_GOLBAL WHERE datatype='H'  LIMIT 1;
			IF v_count>0 THEN -- 如果有记录
				BEGIN
				DECLARE no_more_times INTEGER DEFAULT 0;  -- 定义游标遍历时，作为判断是否遍历完全部记录的标记
				DECLARE cur_type CURSOR FOR 
					SELECT  DISTINCT systemtype FROM T_DATA_MOVE_GOLBAL WHERE datatype='H'
						AND systemtype IN (SELECT systemtype FROM T_DIC_POINTSYSTYPE WHERE TNAMEHH IS NOT NULL);
				DECLARE CONTINUE HANDLER FOR NOT FOUND SET no_more_times=1;
				OPEN cur_type;
				REPEAT
					FETCH cur_type INTO v_systype;
					IF no_more_times<>1 THEN
						SELECT TNAMEHH INTO v_table FROM T_DIC_POINTSYSTYPE WHERE SYSTEMTYPE=v_systype LIMIT 1;
						SET @STMT:=CONCAT("REPLACE INTO ",v_table,
								"(POINTCODE,POLLUTECODE,DATATIME,DATAVALUE,`MAXVALUE`,`MINVALUE`,UPDATETIME,DATAFLAG)
								SELECT T1.POINTCODE,
									T1.POLLUTECODE,
									T1.DATATIME,
									-- T1.SYSTEMTYPE,
									MAX(T1.DATAVALUE) AS `MAXVALUE`,
									MAX(T1.DATAVALUE) AS `MINVALUE`,
									MAX(T1.DATAVALUE) AS DATAVALUE,
									NOW() AS UPDATETIME,
									MAX(T1.DATAFLAG) AS DATAFLAG
								  FROM T_DATA_MOVE_GOLBAL T1 
								  WHERE T1.DATATYPE ='H' AND T1.SYSTEMTYPE='",v_systype,
									"' GROUP BY T1.POINTCODE,T1.DATATIME,T1.POLLUTECODE"
									,";"); 
						PREPARE STMT FROM @STMT;   
						EXECUTE STMT;
					end if;
				UNTIL no_more_times END REPEAT; -- 结束循环
				CLOSE cur_type; -- 
				END;
			END IF;
		end;
	END IF;
	COMMIT;
	SET vResult='Y';
END */$$
DELIMITER ;

/*Table structure for table `V_BAS_ALERTRULE` */

DROP TABLE IF EXISTS `V_BAS_ALERTRULE`;

/*!50001 DROP VIEW IF EXISTS `V_BAS_ALERTRULE` */;
/*!50001 DROP TABLE IF EXISTS `V_BAS_ALERTRULE` */;

/*!50001 CREATE TABLE  `V_BAS_ALERTRULE`(
 `POINTCODE` int(11) ,
 `RULENAME` varchar(9) ,
 `RULECONTENT` varchar(152) ,
 `RULEEXPRESSIONS` varchar(158) ,
 `POLLUTECODE` varchar(50) ,
 `ALARMCODE` bigint(20) ,
 `RULEDUR` double ,
 `RULEDUROFDAY` double ,
 `ALERTTYPE` bigint(20) 
)*/;

/*Table structure for table `V_BAS_POINTSITE_INFO` */

DROP TABLE IF EXISTS `V_BAS_POINTSITE_INFO`;

/*!50001 DROP VIEW IF EXISTS `V_BAS_POINTSITE_INFO` */;
/*!50001 DROP TABLE IF EXISTS `V_BAS_POINTSITE_INFO` */;

/*!50001 CREATE TABLE  `V_BAS_POINTSITE_INFO`(
 `POINTCODE` int(11) ,
 `STDPOINTCODE` varchar(50) ,
 `POINTNAME` varchar(50) ,
 `SYSTEMTYPE` bigint(11) ,
 `REGIONCODE` varchar(50) ,
 `MICYCLETIME` int(11) ,
 `RTCYTLETIME` int(11) ,
 `STATUS` int(11) ,
 `HASVIDEO` int(11) ,
 `SCODE` int(11) ,
 `POINTCODETYPE` bigint(20) 
)*/;

/*Table structure for table `V_BAS_POLLSTD` */

DROP TABLE IF EXISTS `V_BAS_POLLSTD`;

/*!50001 DROP VIEW IF EXISTS `V_BAS_POLLSTD` */;
/*!50001 DROP TABLE IF EXISTS `V_BAS_POLLSTD` */;

/*!50001 CREATE TABLE  `V_BAS_POLLSTD`(
 `POINTCODE` int(11) ,
 `POINTNAME` varchar(50) ,
 `REGIONCODE` varchar(50) ,
 `SCODE` int(11) ,
 `SNAME` varchar(50) ,
 `SYSTEMTYPE` int(11) ,
 `TRADE` varchar(50) ,
 `POLLUTECODE` varchar(50) ,
 `SMAXVALUE` double ,
 `SMINVALUE` double ,
 `SUNIT` varchar(50) 
)*/;

/*Table structure for table `V_ENV_STATIONPOLLINFO` */

DROP TABLE IF EXISTS `V_ENV_STATIONPOLLINFO`;

/*!50001 DROP VIEW IF EXISTS `V_ENV_STATIONPOLLINFO` */;
/*!50001 DROP TABLE IF EXISTS `V_ENV_STATIONPOLLINFO` */;

/*!50001 CREATE TABLE  `V_ENV_STATIONPOLLINFO`(
 `POLLUTECODE` varchar(50) ,
 `POLLUTENAME` varchar(50) ,
 `ORDERNUM` int(11) ,
 `POINTCODE` int(11) ,
 `POINTNAME` varchar(50) ,
 `POINTCODETYPE` bigint(20) ,
 `POLLCONCUNIT` varchar(50) ,
 `NUMPRECISION` int(11) ,
 `SYSTEMTYPE` bigint(11) 
)*/;

/*View structure for view V_BAS_ALERTRULE */

/*!50001 DROP TABLE IF EXISTS `V_BAS_ALERTRULE` */;
/*!50001 DROP VIEW IF EXISTS `V_BAS_ALERTRULE` */;

/*!50001 CREATE VIEW `V_BAS_ALERTRULE` AS select `TEMP`.`POINTCODE` AS `POINTCODE`,`TEMP`.`RULENAME` AS `RULENAME`,`TEMP`.`RULECONTENT` AS `RULECONTENT`,`TEMP`.`RULEEXPRESSIONS` AS `RULEEXPRESSIONS`,`TEMP`.`POLLUTECODE` AS `POLLUTECODE`,`TEMP`.`ALARMCODE` AS `ALARMCODE`,`TEMP`.`RULEDUR` AS `RULEDUR`,`TEMP`.`RULEDUROFDAY` AS `RULEDUROFDAY`,`TEMP`.`ALERTTYPE` AS `ALERTTYPE` from (select `TMP1`.`POINTCODE` AS `POINTCODE`,'超标告警规则' AS `RULENAME`,concat((case when isnull(`TMP1`.`SMINVALUE`) then '' else concat(`TMP1`.`POLLUTENAME`,'小于',`TMP1`.`SMINVALUE`) end),(case when isnull(`TMP1`.`SMINVALUE`) then '' else ' OR ' end),(case when isnull(`TMP1`.`SMAXVALUE`) then '' else concat(`TMP1`.`POLLUTENAME`,'大于',`TMP1`.`SMAXVALUE`) end)) AS `RULECONTENT`,concat((case when isnull(`TMP1`.`SMINVALUE`) then '' else concat(`TMP1`.`POLLUTECODE`,'.RTD<',`TMP1`.`SMINVALUE`) end),(case when isnull(`TMP1`.`SMINVALUE`) then '' else ' OR ' end),(case when isnull(`TMP1`.`SMAXVALUE`) then '' else concat(`TMP1`.`POLLUTECODE`,'.RTD>',`TMP1`.`SMAXVALUE`) end)) AS `RULEEXPRESSIONS`,`TMP1`.`POLLUTECODE` AS `POLLUTECODE`,90002 AS `ALARMCODE`,(60 * 30) AS `RULEDUR`,NULL AS `RULEDUROFDAY`,1 AS `ALERTTYPE` from (select `V1`.`POINTCODE` AS `POINTCODE`,`T2`.`SMAXVALUE` AS `SMAXVALUE`,`T2`.`SMINVALUE` AS `SMINVALUE`,(case when (`T3`.`SYMBOLS` is not null) then `T3`.`SYMBOLS` else `T3`.`POLLUTENAME` end) AS `POLLUTENAME`,`T2`.`POLLUTECODE` AS `POLLUTECODE` from (((`T_DIC_POLLSTD` `T1` join `T_DIC_POLLSTD_DETAIL` `T2`) join `V_BAS_POINTSITE_INFO` `V1`) join `T_DIC_STDPOLLCODE` `T3`) where ((`T1`.`SCODE` = `T2`.`SCODE`) and (`T1`.`SCODE` = `V1`.`SCODE`) and (`T2`.`POLLUTECODE` = `T3`.`POLLUTECODE`))) `TMP1` union all select `V1`.`POINTCODE` AS `POINTCODE`,'数据持续过低告警' AS `RULENAME`,'数据持续过低告警' AS `RULECONTENT`,`T2`.`MEASUREMIN` AS `RULEEXPRESSIONS`,`T2`.`POLLUTECODE` AS `POLLUTECODE`,90090 AS `ALARMCODE`,(case when isnull(`T2`.`DURATION`) then 1440 else `T2`.`DURATION` end) AS `RULEDUR`,(case when isnull(`T2`.`DURATIONOFDAY`) then 7 else `T2`.`DURATIONOFDAY` end) AS `RULEDUROFDAY`,4 AS `ALERTTYPE` from ((`T_BAS_EQUIP` `T1` join `T_BAS_EQUIPPOLLCODE` `T2`) join `V_BAS_POINTSITE_INFO` `V1`) where ((`V1`.`POINTCODE` = `T1`.`POINTCODE`) and (`T1`.`EID` = `T2`.`EID`)) union all select `V1`.`POINTCODE` AS `POINTCODE`,'浓度小于特定值告警' AS `RULENAME`,'浓度小于特定值告警' AS `RULECONTENT`,`T2`.`SV` AS `RULEEXPRESSIONS`,`T2`.`POLLUTECODE` AS `POLLUTECODE`,90091 AS `ALARMCODE`,NULL AS `RULEDUR`,NULL AS `RULEDUROFDAY`,5 AS `ALERTTYPE` from ((`T_BAS_EQUIP` `T1` join `T_BAS_EQUIPPOLLCODE` `T2`) join `V_BAS_POINTSITE_INFO` `V1`) where ((`V1`.`POINTCODE` = `T1`.`POINTCODE`) and (`T1`.`EID` = `T2`.`EID`))) `TEMP` */;

/*View structure for view V_BAS_POINTSITE_INFO */

/*!50001 DROP TABLE IF EXISTS `V_BAS_POINTSITE_INFO` */;
/*!50001 DROP VIEW IF EXISTS `V_BAS_POINTSITE_INFO` */;

/*!50001 CREATE VIEW `V_BAS_POINTSITE_INFO` AS select `T_ENV_MONI_AIR_STATION`.`POINTCODE` AS `POINTCODE`,`T_ENV_MONI_AIR_STATION`.`STDPOINTCODE` AS `STDPOINTCODE`,`T_ENV_MONI_AIR_STATION`.`POINTNAME` AS `POINTNAME`,22 AS `SYSTEMTYPE`,`T_ENV_MONI_AIR_STATION`.`REGIONCODE` AS `REGIONCODE`,`T_ENV_MONI_AIR_STATION`.`MICYCLETIME` AS `MICYCLETIME`,`T_ENV_MONI_AIR_STATION`.`RTCYTLETIME` AS `RTCYTLETIME`,`T_ENV_MONI_AIR_STATION`.`STATUS` AS `STATUS`,`T_ENV_MONI_AIR_STATION`.`HASVIDEO` AS `HASVIDEO`,`T_ENV_MONI_AIR_STATION`.`SCODE` AS `SCODE`,`T_ENV_MONI_AIR_STATION`.`POINTCODETYPE` AS `POINTCODETYPE` from `T_ENV_MONI_AIR_STATION` union select `T_PS_BAS_POINTLIST`.`POINTCODE` AS `POINTCODE`,`T_PS_BAS_POINTLIST`.`STDPOINTCODE` AS `STDPOINTCODE`,`T_PS_BAS_POINTLIST`.`POINTNAME` AS `POINTNAME`,`T_PS_BAS_POINTLIST`.`SYSTEMTYPE` AS `SYSTEMTYPE`,`T_PS_BAS_POINTLIST`.`REGIONCODE` AS `REGIONCODE`,`T_PS_BAS_POINTLIST`.`MICYCLETIME` AS `MICYCLETIME`,`T_PS_BAS_POINTLIST`.`RTCYTLETIME` AS `RTCYTLETIME`,`T_PS_BAS_POINTLIST`.`STATUS` AS `STATUS`,`T_PS_BAS_POINTLIST`.`HASVIDEO` AS `HASVIDEO`,`T_PS_BAS_POINTLIST`.`SCODE` AS `SCODE`,0 AS `POINTCODETYPE` from `T_PS_BAS_POINTLIST` */;

/*View structure for view V_BAS_POLLSTD */

/*!50001 DROP TABLE IF EXISTS `V_BAS_POLLSTD` */;
/*!50001 DROP VIEW IF EXISTS `V_BAS_POLLSTD` */;

/*!50001 CREATE VIEW `V_BAS_POLLSTD` AS select `T2`.`POINTCODE` AS `POINTCODE`,`T2`.`POINTNAME` AS `POINTNAME`,`T2`.`REGIONCODE` AS `REGIONCODE`,`T1`.`SCODE` AS `SCODE`,`T1`.`SNAME` AS `SNAME`,`T1`.`SYSTEMTYPE` AS `SYSTEMTYPE`,`T1`.`TRADE` AS `TRADE`,`T3`.`POLLUTECODE` AS `POLLUTECODE`,`T3`.`SMAXVALUE` AS `SMAXVALUE`,`T3`.`SMINVALUE` AS `SMINVALUE`,`T3`.`SUNIT` AS `SUNIT` from ((`T_DIC_POLLSTD` `T1` join `T_PS_BAS_POINTLIST` `T2` on((`T1`.`SCODE` = `T2`.`SCODE`))) join `T_DIC_POLLSTD_DETAIL` `T3` on((`T1`.`SCODE` = `T3`.`SCODE`))) union all select `T2`.`POINTCODE` AS `POINTCODE`,`T2`.`POINTNAME` AS `POINTNAME`,`T2`.`REGIONCODE` AS `REGIONCODE`,`T1`.`SCODE` AS `SCODE`,`T1`.`SNAME` AS `SNAME`,`T1`.`SYSTEMTYPE` AS `SYSTEMTYPE`,`T1`.`TRADE` AS `TRADE`,`T3`.`POLLUTECODE` AS `POLLUTECODE`,`T3`.`SMAXVALUE` AS `SMAXVALUE`,`T3`.`SMINVALUE` AS `SMINVALUE`,`T3`.`SUNIT` AS `SUNIT` from ((`T_DIC_POLLSTD` `T1` join `T_ENV_MONI_AIR_STATION` `T2` on((`T1`.`SCODE` = `T2`.`SCODE`))) join `T_DIC_POLLSTD_DETAIL` `T3` on((`T1`.`SCODE` = `T3`.`SCODE`))) */;

/*View structure for view V_ENV_STATIONPOLLINFO */

/*!50001 DROP TABLE IF EXISTS `V_ENV_STATIONPOLLINFO` */;
/*!50001 DROP VIEW IF EXISTS `V_ENV_STATIONPOLLINFO` */;

/*!50001 CREATE VIEW `V_ENV_STATIONPOLLINFO` AS (select `t`.`POLLUTECODE` AS `POLLUTECODE`,`t`.`POLLUTENAME` AS `POLLUTENAME`,`t`.`ORDERNUM` AS `ORDERNUM`,`ms`.`POINTCODE` AS `POINTCODE`,`ms`.`POINTNAME` AS `POINTNAME`,`ms`.`POINTCODETYPE` AS `POINTCODETYPE`,`t`.`POLLCONCUNIT` AS `POLLCONCUNIT`,`t`.`NUMPRECISION` AS `NUMPRECISION`,`ms`.`SYSTEMTYPE` AS `SYSTEMTYPE` from (((`T_DIC_STDPOLLCODE` `t` join `T_BAS_ETYPEPOLLUTE` `p` on((`p`.`POLLUTECODE` = `t`.`POLLUTECODE`))) join `T_BAS_EQUIP` `e` on((`e`.`ETYPECODE` = `p`.`ETYPECODE`))) join `V_BAS_POINTSITE_INFO` `ms` on((`ms`.`POINTCODE` = `e`.`POINTCODE`)))) */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

/*************************************以上GEMS V1.0版本*****************************************/
ALTER TABLE T_PS_BAS_ENTERLIST ADD COLUMN ESTATUS INT DEFAULT 1 COMMENT '状态,1正常0删除';
 ALTER TABLE T_PS_BAS_ENTERLIST ADD COLUMN IPGP VARCHAR(100) COMMENT '企业简称';
 ALTER TABLE T_PS_BAS_ENTERLIST ADD COLUMN ENTERFIRSTLETTER VARCHAR(100) COMMENT '企业名称首字母缩写';
 ALTER TABLE T_PS_BAS_ENTERLIST ADD COLUMN PICCODELIST VARCHAR(100) COMMENT '多个企业图片id，逗号分隔';
 ALTER TABLE T_PS_BAS_ENTERLIST ADD COLUMN ORDERNUM INT COMMENT '顺序';

/**********新增因子分组表***********/
drop table if exists T_DIC_FACTORGROUP;
create table T_DIC_FACTORGROUP
(
   GROUPCODE            int not null comment '分组代码',
   GROUPNAME            nvarchar(50) comment '组名',
   GROUPTYPE            int comment '组类别',
   ORDERNUM             int comment '排序',
   primary key (GROUPCODE)
);
alter table T_DIC_FACTORGROUP comment '字典-因子分组';

drop table if exists T_DIC_FACTORGROUPRELATION;
create table T_DIC_FACTORGROUPRELATION
(
   GROUPCODE            int not null comment '分组代码',
   POLLUTECODE          nvarchar(50) not null comment '因子代码',
   primary key (GROUPCODE, POLLUTECODE)
);
alter table T_DIC_FACTORGROUPRELATION comment '字典-因子分组关系表';
alter table T_DIC_FACTORGROUPRELATION add constraint FK_T_DIC_FG_T_CID_G foreign key (GROUPCODE)
      references T_DIC_FACTORGROUP (GROUPCODE) on delete restrict on update restrict;